import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '../ui/card';
import { Button } from '../ui/button';
import { Input } from '../ui/input';
import { Label } from '../ui/label';
import { Switch } from '../ui/switch';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '../ui/tabs';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../ui/select';
import { Textarea } from '../ui/textarea';
import { Badge } from '../ui/badge';
import { Separator } from '../ui/separator';
import { Settings, User, Bell, Shield, Palette, Link, Save, Key, Mail, Phone, MapPin, Globe, Clock, Zap, Facebook, Instagram, Send as Telegram, MessageSquare, CheckCircle, XCircle, AlertCircle, Trash2 } from 'lucide-react';
import { toast } from 'sonner';
import { useSettings } from '../../src/App';

type Integration = {
  id: string;
  name: string;
  icon: any;
  connected: boolean;
  color: string;
};

export function SettingsPage() {
  // Get settings from context
  const settings = useSettings();
  const { 
    businessName, 
    setBusinessName, 
    theme, 
    setTheme, 
    primaryColor, 
    setPrimaryColor,
    compactMode,
    setCompactMode,
    language,
    setLanguage
  } = settings;
  
  // Local Settings
  const [timezone, setTimezone] = useState('asia-hcm');
  const [aiAutoMode, setAiAutoMode] = useState(true);

  // Profile Settings
  const [fullName, setFullName] = useState('Admin User');
  const [email, setEmail] = useState('admin@aiagent.com');
  const [phone, setPhone] = useState('0909 xxx xxx');
  const [address, setAddress] = useState('123 ƒê∆∞·ªùng ABC, Qu·∫≠n 1, TP.HCM');

  // Notification Settings
  const [notifyNewMessage, setNotifyNewMessage] = useState(true);
  const [notifyPostSuccess, setNotifyPostSuccess] = useState(true);
  const [notifyDailyReport, setNotifyDailyReport] = useState(false);
  const [notifySystemAlert, setNotifySystemAlert] = useState(true);
  const [notifyEmail, setNotifyEmail] = useState(true);
  const [notifySMS, setNotifySMS] = useState(false);

  // Security Settings
  const [currentPassword, setCurrentPassword] = useState('');
  const [newPassword, setNewPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [twoFactorAuth, setTwoFactorAuth] = useState(false);

  // Integrations
  const [integrations, setIntegrations] = useState<Integration[]>([
    { id: 'facebook', name: 'Facebook', icon: Facebook, connected: true, color: 'bg-blue-500' },
    { id: 'instagram', name: 'Instagram', icon: Instagram, connected: true, color: 'bg-pink-500' },
    { id: 'zalo', name: 'Zalo', icon: MessageSquare, connected: false, color: 'bg-blue-600' },
    { id: 'telegram', name: 'Telegram', icon: Telegram, connected: true, color: 'bg-cyan-500' },
    { id: 'website', name: 'Website Chat', icon: Globe, connected: true, color: 'bg-purple-500' },
  ]);

  // Appearance Settings are now from context

  const handleSaveGeneral = () => {
    toast.success('ƒê√£ l∆∞u c√†i ƒë·∫∑t chung!', {
      description: 'C√°c thay ƒë·ªïi ƒë√£ ƒë∆∞·ª£c √°p d·ª•ng'
    });
  };

  const handleSaveProfile = () => {
    if (!fullName.trim() || !email.trim()) {
      toast.error('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc');
      return;
    }
    toast.success('ƒê√£ c·∫≠p nh·∫≠t h·ªì s∆°!', {
      description: 'Th√¥ng tin c√° nh√¢n ƒë√£ ƒë∆∞·ª£c l∆∞u'
    });
  };

  const handleSaveNotifications = () => {
    toast.success('ƒê√£ l∆∞u c√†i ƒë·∫∑t th√¥ng b√°o!', {
      description: 'B·∫°n s·∫Ω nh·∫≠n th√¥ng b√°o theo c√†i ƒë·∫∑t m·ªõi'
    });
  };

  const handleChangePassword = () => {
    if (!currentPassword || !newPassword || !confirmPassword) {
      toast.error('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin m·∫≠t kh·∫©u');
      return;
    }
    if (newPassword !== confirmPassword) {
      toast.error('M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp');
      return;
    }
    if (newPassword.length < 8) {
      toast.error('M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 8 k√Ω t·ª±');
      return;
    }
    
    toast.success('ƒê√£ ƒë·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng!', {
      description: 'Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i v·ªõi m·∫≠t kh·∫©u m·ªõi'
    });
    
    setCurrentPassword('');
    setNewPassword('');
    setConfirmPassword('');
  };

  const toggleIntegration = (id: string) => {
    setIntegrations(integrations.map(int => 
      int.id === id 
        ? { ...int, connected: !int.connected }
        : int
    ));

    const integration = integrations.find(int => int.id === id);
    if (integration) {
      if (!integration.connected) {
        toast.success(`ƒê√£ k·∫øt n·ªëi ${integration.name}!`, {
          description: 'B·∫°n c√≥ th·ªÉ b·∫Øt ƒë·∫ßu s·ª≠ d·ª•ng k√™nh n√†y'
        });
      } else {
        toast.info(`ƒê√£ ng·∫Øt k·∫øt n·ªëi ${integration.name}`, {
          description: 'K√™nh n√†y s·∫Ω kh√¥ng ho·∫°t ƒë·ªông'
        });
      }
    }
  };

  const handleSaveAppearance = () => {
    toast.success('ƒê√£ l∆∞u giao di·ªán!', {
      description: 'Thay ƒë·ªïi s·∫Ω ƒë∆∞·ª£c √°p d·ª•ng ngay'
    });
  };

  const handleTestNotification = () => {
    toast.info('üîî ƒê√¢y l√† th√¥ng b√°o th·ª≠ nghi·ªám', {
      description: 'B·∫°n s·∫Ω nh·∫≠n th√¥ng b√°o theo c√°ch n√†y'
    });
  };

  const handleChangeAvatar = () => {
    toast.info('üì∏ T√≠nh nƒÉng ƒëang ph√°t tri·ªÉn', {
      description: 'Ch·ª©c nƒÉng thay ƒë·ªïi ·∫£nh ƒë·∫°i di·ªán s·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t s·ªõm'
    });
  };

  const handleLogoutAllDevices = () => {
    toast.success('üîê ƒê√£ ƒëƒÉng xu·∫•t t·∫•t c·∫£ thi·∫øt b·ªã kh√°c', {
      description: 'Ch·ªâ thi·∫øt b·ªã hi·ªán t·∫°i c√≤n ƒëƒÉng nh·∫≠p'
    });
  };

  const connectedCount = integrations.filter(int => int.connected).length;

  return (
    <div>
      {/* Header */}
      <div className="mb-6">
        <div className="flex items-center gap-3 mb-2">
          <div className="w-1.5 h-8 bg-gradient-to-b from-slate-500 to-slate-600 rounded-full" />
          <h1 className="text-slate-900">C√†i ƒë·∫∑t</h1>
        </div>
        <p className="text-slate-600 ml-5">Qu·∫£n l√Ω c√†i ƒë·∫∑t h·ªá th·ªëng v√† t√†i kho·∫£n</p>
      </div>

      <Tabs defaultValue="general" className="space-y-5">
        <TabsList className="bg-slate-100 grid grid-cols-6 lg:w-auto">
          <TabsTrigger value="general" className="gap-2">
            <Settings className="w-4 h-4" />
            <span className="hidden sm:inline">Chung</span>
          </TabsTrigger>
          <TabsTrigger value="profile" className="gap-2">
            <User className="w-4 h-4" />
            <span className="hidden sm:inline">H·ªì s∆°</span>
          </TabsTrigger>
          <TabsTrigger value="notifications" className="gap-2">
            <Bell className="w-4 h-4" />
            <span className="hidden sm:inline">Th√¥ng b√°o</span>
          </TabsTrigger>
          <TabsTrigger value="integrations" className="gap-2">
            <Link className="w-4 h-4" />
            <span className="hidden sm:inline">T√≠ch h·ª£p</span>
          </TabsTrigger>
          <TabsTrigger value="appearance" className="gap-2">
            <Palette className="w-4 h-4" />
            <span className="hidden sm:inline">Giao di·ªán</span>
          </TabsTrigger>
          <TabsTrigger value="security" className="gap-2">
            <Shield className="w-4 h-4" />
            <span className="hidden sm:inline">B·∫£o m·∫≠t</span>
          </TabsTrigger>
        </TabsList>

        {/* General Settings */}
        <TabsContent value="general">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-5">
            <Card className="border-slate-200/60 shadow-sm">
              <CardHeader className="border-b border-slate-100">
                <CardTitle className="flex items-center gap-2">
                  <Settings className="w-5 h-5 text-blue-600" />
                  C√†i ƒë·∫∑t chung
                </CardTitle>
                <CardDescription>C·∫•u h√¨nh chung cho h·ªá th·ªëng AI Agent</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4 pt-5">
                <div className="space-y-2">
                  <Label htmlFor="business-name" className="flex items-center gap-2">
                    <Globe className="w-4 h-4" />
                    T√™n doanh nghi·ªáp
                  </Label>
                  <Input 
                    id="business-name"
                    value={businessName} 
                    onChange={(e) => setBusinessName(e.target.value)}
                  />
                </div>
                
                <div className="space-y-2">
                  <Label htmlFor="language">Ng√¥n ng·ªØ m·∫∑c ƒë·ªãnh</Label>
                  <Select 
                    value={language} 
                    onValueChange={(value) => {
                      setLanguage(value);
                      toast.success(value === 'vi' ? 'üáªüá≥ ƒê√£ chuy·ªÉn sang Ti·∫øng Vi·ªát' : 'üá¨üáß Switched to English');
                    }}
                  >
                    <SelectTrigger id="language">
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="vi">üáªüá≥ Ti·∫øng Vi·ªát</SelectItem>
                      <SelectItem value="en">üá¨üáß English</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="timezone" className="flex items-center gap-2">
                    <Clock className="w-4 h-4" />
                    M√∫i gi·ªù
                  </Label>
                  <Select 
                    value={timezone} 
                    onValueChange={(value) => {
                      setTimezone(value);
                      const timezoneNames: Record<string, string> = {
                        'asia-hcm': 'H·ªì Ch√≠ Minh',
                        'asia-hanoi': 'H√† N·ªôi',
                        'asia-danang': 'ƒê√† N·∫µng'
                      };
                      toast.success(`üïê ƒê√£ ƒë·ªïi m√∫i gi·ªù sang ${timezoneNames[value]}`);
                    }}
                  >
                    <SelectTrigger id="timezone">
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="asia-hcm">GMT+7 (H·ªì Ch√≠ Minh)</SelectItem>
                      <SelectItem value="asia-hanoi">GMT+7 (H√† N·ªôi)</SelectItem>
                      <SelectItem value="asia-danang">GMT+7 (ƒê√† N·∫µng)</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <Separator />

                <div className="flex items-center justify-between">
                  <div className="flex-1 pr-4">
                    <Label className="font-medium">Ch·∫ø ƒë·ªô AI t·ª± ƒë·ªông</Label>
                    <p className="text-xs text-slate-500 mt-1">Cho ph√©p AI t·ª± ƒë·ªông tr·∫£ l·ªùi tin nh·∫Øn</p>
                  </div>
                  <Switch 
                    checked={aiAutoMode} 
                    onCheckedChange={(checked) => {
                      setAiAutoMode(checked);
                      toast.success(checked ? 'ƒê√£ b·∫≠t AI t·ª± ƒë·ªông' : 'ƒê√£ t·∫Øt AI t·ª± ƒë·ªông');
                    }}
                  />
                </div>

                <Button 
                  className="w-full bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700 gap-2"
                  onClick={handleSaveGeneral}
                >
                  <Save className="w-4 h-4" />
                  L∆∞u thay ƒë·ªïi
                </Button>
              </CardContent>
            </Card>
          </div>
        </TabsContent>

        {/* Profile Settings */}
        <TabsContent value="profile">
          <Card className="border-slate-200/60 shadow-sm max-w-3xl">
            <CardHeader className="border-b border-slate-100">
              <CardTitle className="flex items-center gap-2">
                <User className="w-5 h-5 text-green-600" />
                Th√¥ng tin c√° nh√¢n
              </CardTitle>
              <CardDescription>C·∫≠p nh·∫≠t th√¥ng tin t√†i kho·∫£n c·ªßa b·∫°n</CardDescription>
            </CardHeader>
            <CardContent className="space-y-5 pt-5">
              <div className="flex items-center gap-4">
                <div className="w-20 h-20 bg-gradient-to-br from-green-500 to-emerald-600 rounded-full flex items-center justify-center text-white text-2xl font-semibold">
                  {fullName.charAt(0)}
                </div>
                <div>
                  <p className="font-medium text-slate-900">{fullName}</p>
                  <p className="text-sm text-slate-600">{email}</p>
                  <Button 
                    variant="outline" 
                    size="sm" 
                    className="mt-2"
                    onClick={handleChangeAvatar}
                  >
                    Thay ƒë·ªïi ·∫£nh
                  </Button>
                </div>
              </div>

              <Separator />

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="full-name" className="flex items-center gap-2">
                    <User className="w-4 h-4" />
                    H·ªç v√† t√™n
                  </Label>
                  <Input 
                    id="full-name"
                    value={fullName} 
                    onChange={(e) => setFullName(e.target.value)}
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="email" className="flex items-center gap-2">
                    <Mail className="w-4 h-4" />
                    Email
                  </Label>
                  <Input 
                    id="email"
                    type="email"
                    value={email} 
                    onChange={(e) => setEmail(e.target.value)}
                  />
                </div>
              </div>

              <div className="space-y-2">
                <Label htmlFor="phone" className="flex items-center gap-2">
                  <Phone className="w-4 h-4" />
                  S·ªë ƒëi·ªán tho·∫°i
                </Label>
                <Input 
                  id="phone"
                  value={phone} 
                  onChange={(e) => setPhone(e.target.value)}
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="address" className="flex items-center gap-2">
                  <MapPin className="w-4 h-4" />
                  ƒê·ªãa ch·ªâ
                </Label>
                <Textarea
                  id="address"
                  value={address} 
                  onChange={(e) => setAddress(e.target.value)}
                  rows={3}
                  className="resize-none"
                />
              </div>

              <Button 
                className="w-full bg-gradient-to-r from-green-600 to-emerald-600 hover:from-green-700 hover:to-emerald-700 gap-2"
                onClick={handleSaveProfile}
              >
                <Save className="w-4 h-4" />
                C·∫≠p nh·∫≠t h·ªì s∆°
              </Button>
            </CardContent>
          </Card>
        </TabsContent>

        {/* Notification Settings */}
        <TabsContent value="notifications">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-5">
            <Card className="border-slate-200/60 shadow-sm">
              <CardHeader className="border-b border-slate-100">
                <CardTitle className="flex items-center gap-2">
                  <Bell className="w-5 h-5 text-orange-600" />
                  C√†i ƒë·∫∑t th√¥ng b√°o
                </CardTitle>
                <CardDescription>Qu·∫£n l√Ω c√°c th√¥ng b√°o b·∫°n nh·∫≠n ƒë∆∞·ª£c</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4 pt-5">
                <div className="flex items-center justify-between">
                  <div className="flex-1 pr-4">
                    <Label className="font-medium">Tin nh·∫Øn m·ªõi</Label>
                    <p className="text-xs text-slate-500 mt-1">Nh·∫≠n th√¥ng b√°o khi c√≥ tin nh·∫Øn m·ªõi</p>
                  </div>
                  <Switch 
                    checked={notifyNewMessage} 
                    onCheckedChange={(checked) => {
                      setNotifyNewMessage(checked);
                      toast.success(checked ? '‚úÖ ƒê√£ b·∫≠t th√¥ng b√°o tin nh·∫Øn m·ªõi' : '‚ùå ƒê√£ t·∫Øt th√¥ng b√°o tin nh·∫Øn m·ªõi');
                    }}
                  />
                </div>

                <Separator />

                <div className="flex items-center justify-between">
                  <div className="flex-1 pr-4">
                    <Label className="font-medium">ƒêƒÉng b√†i th√†nh c√¥ng</Label>
                    <p className="text-xs text-slate-500 mt-1">Th√¥ng b√°o khi b√†i vi·∫øt ƒë∆∞·ª£c ƒëƒÉng</p>
                  </div>
                  <Switch 
                    checked={notifyPostSuccess} 
                    onCheckedChange={(checked) => {
                      setNotifyPostSuccess(checked);
                      toast.success(checked ? '‚úÖ ƒê√£ b·∫≠t th√¥ng b√°o ƒëƒÉng b√†i' : '‚ùå ƒê√£ t·∫Øt th√¥ng b√°o ƒëƒÉng b√†i');
                    }}
                  />
                </div>

                <Separator />

                <div className="flex items-center justify-between">
                  <div className="flex-1 pr-4">
                    <Label className="font-medium">B√°o c√°o h√†ng ng√†y</Label>
                    <p className="text-xs text-slate-500 mt-1">Nh·∫≠n b√°o c√°o t·ªïng h·ª£p m·ªói ng√†y</p>
                  </div>
                  <Switch 
                    checked={notifyDailyReport} 
                    onCheckedChange={(checked) => {
                      setNotifyDailyReport(checked);
                      toast.success(checked ? '‚úÖ ƒê√£ b·∫≠t b√°o c√°o h√†ng ng√†y' : '‚ùå ƒê√£ t·∫Øt b√°o c√°o h√†ng ng√†y');
                    }}
                  />
                </div>

                <Separator />

                <div className="flex items-center justify-between">
                  <div className="flex-1 pr-4">
                    <Label className="font-medium">C·∫£nh b√°o h·ªá th·ªëng</Label>
                    <p className="text-xs text-slate-500 mt-1">Th√¥ng b√°o v·ªÅ l·ªói v√† c·∫£nh b√°o</p>
                  </div>
                  <Switch 
                    checked={notifySystemAlert} 
                    onCheckedChange={(checked) => {
                      setNotifySystemAlert(checked);
                      toast.success(checked ? '‚úÖ ƒê√£ b·∫≠t c·∫£nh b√°o h·ªá th·ªëng' : '‚ùå ƒê√£ t·∫Øt c·∫£nh b√°o h·ªá th·ªëng');
                    }}
                  />
                </div>

                <Separator />

                <Button 
                  className="w-full bg-gradient-to-r from-orange-600 to-red-600 hover:from-orange-700 hover:to-red-700 gap-2"
                  onClick={handleSaveNotifications}
                >
                  <Save className="w-4 h-4" />
                  L∆∞u c√†i ƒë·∫∑t
                </Button>
              </CardContent>
            </Card>

            <Card className="border-slate-200/60 shadow-sm">
              <CardHeader className="border-b border-slate-100">
                <CardTitle className="flex items-center gap-2">
                  <MessageSquare className="w-5 h-5 text-purple-600" />
                  K√™nh nh·∫≠n th√¥ng b√°o
                </CardTitle>
                <CardDescription>Ch·ªçn c√°ch b·∫°n mu·ªën nh·∫≠n th√¥ng b√°o</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4 pt-5">
                <div className="flex items-center justify-between">
                  <div className="flex-1 pr-4">
                    <Label className="font-medium">Email</Label>
                    <p className="text-xs text-slate-500 mt-1">G·ª≠i th√¥ng b√°o qua email</p>
                  </div>
                  <Switch 
                    checked={notifyEmail} 
                    onCheckedChange={(checked) => {
                      setNotifyEmail(checked);
                      toast.success(checked ? 'üìß ƒê√£ b·∫≠t th√¥ng b√°o qua Email' : '‚ùå ƒê√£ t·∫Øt th√¥ng b√°o qua Email');
                    }}
                  />
                </div>

                <Separator />

                <div className="flex items-center justify-between">
                  <div className="flex-1 pr-4">
                    <Label className="font-medium">SMS</Label>
                    <p className="text-xs text-slate-500 mt-1">G·ª≠i th√¥ng b√°o qua tin nh·∫Øn SMS</p>
                  </div>
                  <Switch 
                    checked={notifySMS} 
                    onCheckedChange={(checked) => {
                      setNotifySMS(checked);
                      toast.success(checked ? 'üì± ƒê√£ b·∫≠t th√¥ng b√°o qua SMS' : '‚ùå ƒê√£ t·∫Øt th√¥ng b√°o qua SMS');
                    }}
                  />
                </div>

                <Separator />

                <div className="p-4 bg-purple-50 rounded-lg border border-purple-200">
                  <div className="flex items-center justify-between mb-3">
                    <p className="font-medium text-purple-900">Th·ª≠ nghi·ªám</p>
                    <Button 
                      variant="outline" 
                      size="sm"
                      onClick={handleTestNotification}
                    >
                      G·ª≠i th·ª≠
                    </Button>
                  </div>
                  <p className="text-sm text-purple-700">Ki·ªÉm tra xem b·∫°n c√≥ nh·∫≠n ƒë∆∞·ª£c th√¥ng b√°o kh√¥ng</p>
                </div>

                <div className="grid grid-cols-2 gap-3">
                  <div className="p-3 bg-slate-50 rounded-lg border border-slate-200 text-center">
                    <p className="text-2xl font-semibold text-slate-900">
                      {[notifyNewMessage, notifyPostSuccess, notifyDailyReport, notifySystemAlert].filter(Boolean).length}
                    </p>
                    <p className="text-xs text-slate-600 mt-1">ƒê√£ b·∫≠t</p>
                  </div>
                  <div className="p-3 bg-slate-50 rounded-lg border border-slate-200 text-center">
                    <p className="text-2xl font-semibold text-slate-900">
                      {[notifyEmail, notifySMS].filter(Boolean).length}
                    </p>
                    <p className="text-xs text-slate-600 mt-1">K√™nh</p>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        </TabsContent>

        {/* Integration Settings */}
        <TabsContent value="integrations">
          <Card className="border-slate-200/60 shadow-sm">
            <CardHeader className="border-b border-slate-100">
              <div className="flex items-center justify-between">
                <div>
                  <CardTitle className="flex items-center gap-2">
                    <Link className="w-5 h-5 text-blue-600" />
                    T√≠ch h·ª£p n·ªÅn t·∫£ng
                  </CardTitle>
                  <CardDescription className="mt-1">K·∫øt n·ªëi v·ªõi c√°c n·ªÅn t·∫£ng m·∫°ng x√£ h·ªôi</CardDescription>
                </div>
                <Badge className="bg-green-50 text-green-700 border-0">
                  {connectedCount}/{integrations.length} k·∫øt n·ªëi
                </Badge>
              </div>
            </CardHeader>
            <CardContent className="pt-5">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {integrations.map((platform) => {
                  const Icon = platform.icon;
                  return (
                    <Card key={platform.id} className="border-slate-200/60">
                      <CardContent className="pt-5 pb-5">
                        <div className="flex items-center justify-between">
                          <div className="flex items-center gap-3">
                            <div className={`w-12 h-12 ${platform.color} rounded-xl flex items-center justify-center shadow-lg`}>
                              <Icon className="w-6 h-6 text-white" />
                            </div>
                            <div>
                              <p className="font-medium text-slate-900">{platform.name}</p>
                              <div className="flex items-center gap-2 mt-1">
                                {platform.connected ? (
                                  <Badge className="bg-green-50 text-green-700 border-green-200 text-xs">
                                    <CheckCircle className="w-3 h-3 mr-1" />
                                    ƒê√£ k·∫øt n·ªëi
                                  </Badge>
                                ) : (
                                  <Badge className="bg-slate-50 text-slate-700 border-slate-200 text-xs">
                                    <XCircle className="w-3 h-3 mr-1" />
                                    Ch∆∞a k·∫øt n·ªëi
                                  </Badge>
                                )}
                              </div>
                            </div>
                          </div>
                          <Button 
                            variant={platform.connected ? "outline" : "default"}
                            size="sm"
                            onClick={() => toggleIntegration(platform.id)}
                            className={platform.connected ? '' : 'bg-gradient-to-r from-blue-600 to-indigo-600'}
                          >
                            {platform.connected ? 'Ng·∫Øt' : 'K·∫øt n·ªëi'}
                          </Button>
                        </div>
                      </CardContent>
                    </Card>
                  );
                })}
              </div>

              <div className="mt-5 p-4 bg-blue-50 rounded-lg border border-blue-200">
                <div className="flex items-start gap-3">
                  <AlertCircle className="w-5 h-5 text-blue-600 mt-0.5" />
                  <div>
                    <p className="font-medium text-blue-900 mb-1">L∆∞u √Ω</p>
                    <p className="text-sm text-blue-700">M·ªói n·ªÅn t·∫£ng c·∫ßn c·∫•u h√¨nh ri√™ng. Sau khi k·∫øt n·ªëi, vui l√≤ng ki·ªÉm tra c√°c quy·ªÅn v√† thi·∫øt l·∫≠p webhook ƒë·ªÉ ƒë·∫£m b·∫£o ho·∫°t ƒë·ªông t·ªët nh·∫•t.</p>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        {/* Appearance Settings */}
        <TabsContent value="appearance">
          <Card className="border-slate-200/60 shadow-sm max-w-2xl">
            <CardHeader className="border-b border-slate-100">
              <CardTitle className="flex items-center gap-2">
                <Palette className="w-5 h-5 text-pink-600" />
                Giao di·ªán
              </CardTitle>
              <CardDescription>T√πy ch·ªânh giao di·ªán dashboard</CardDescription>
            </CardHeader>
            <CardContent className="space-y-5 pt-5">
              <div className="space-y-2">
                <Label htmlFor="theme">Ch·ªß ƒë·ªÅ</Label>
                <Select 
                  value={theme} 
                  onValueChange={(value) => {
                    setTheme(value);
                    const themeNames: Record<string, string> = {
                      'light': '‚òÄÔ∏è S√°ng',
                      'dark': 'üåô T·ªëi',
                      'auto': 'üîÑ T·ª± ƒë·ªông'
                    };
                    toast.success(`ƒê√£ ƒë·ªïi sang ch·ªß ƒë·ªÅ ${themeNames[value]}`);
                  }}
                >
                  <SelectTrigger id="theme">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="light">‚òÄÔ∏è S√°ng</SelectItem>
                    <SelectItem value="dark">üåô T·ªëi</SelectItem>
                    <SelectItem value="auto">üîÑ T·ª± ƒë·ªông</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div className="space-y-2">
                <Label htmlFor="primary-color">M√†u ch·ªß ƒë·∫°o</Label>
                <Select 
                  value={primaryColor} 
                  onValueChange={(value) => {
                    setPrimaryColor(value);
                    const colorNames: Record<string, string> = {
                      'blue': 'üîµ Xanh d∆∞∆°ng',
                      'green': 'üü¢ Xanh l√°',
                      'purple': 'üü£ T√≠m',
                      'orange': 'üü† Cam',
                      'pink': 'ü©∑ H·ªìng'
                    };
                    toast.success(`ƒê√£ ƒë·ªïi m√†u ch·ªß ƒë·∫°o: ${colorNames[value]}`);
                  }}
                >
                  <SelectTrigger id="primary-color">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="blue">üîµ Xanh d∆∞∆°ng</SelectItem>
                    <SelectItem value="green">üü¢ Xanh l√°</SelectItem>
                    <SelectItem value="purple">üü£ T√≠m</SelectItem>
                    <SelectItem value="orange">üü† Cam</SelectItem>
                    <SelectItem value="pink">ü©∑ H·ªìng</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <Separator />

              <div className="flex items-center justify-between">
                <div className="flex-1 pr-4">
                  <Label className="font-medium">Ch·∫ø ƒë·ªô thu g·ªçn</Label>
                  <p className="text-xs text-slate-500 mt-1">Hi·ªÉn th·ªã giao di·ªán nh·ªè g·ªçn h∆°n</p>
                </div>
                <Switch 
                  checked={compactMode} 
                  onCheckedChange={(checked) => {
                    setCompactMode(checked);
                    toast.success(checked ? 'üìê ƒê√£ b·∫≠t ch·∫ø ƒë·ªô thu g·ªçn' : 'üìê ƒê√£ t·∫Øt ch·∫ø ƒë·ªô thu g·ªçn');
                  }}
                />
              </div>

              <Button 
                className="w-full bg-gradient-to-r from-pink-600 to-purple-600 hover:from-pink-700 hover:to-purple-700 gap-2"
                onClick={handleSaveAppearance}
              >
                <Save className="w-4 h-4" />
                L∆∞u giao di·ªán
              </Button>
            </CardContent>
          </Card>
        </TabsContent>

        {/* Security Settings */}
        <TabsContent value="security">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-5">
            <Card className="border-slate-200/60 shadow-sm">
              <CardHeader className="border-b border-slate-100">
                <CardTitle className="flex items-center gap-2">
                  <Key className="w-5 h-5 text-red-600" />
                  ƒê·ªïi m·∫≠t kh·∫©u
                </CardTitle>
                <CardDescription>C·∫≠p nh·∫≠t m·∫≠t kh·∫©u b·∫£o m·∫≠t</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4 pt-5">
                <div className="space-y-2">
                  <Label htmlFor="current-password">M·∫≠t kh·∫©u hi·ªán t·∫°i</Label>
                  <Input 
                    id="current-password"
                    type="password" 
                    value={currentPassword}
                    onChange={(e) => setCurrentPassword(e.target.value)}
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="new-password">M·∫≠t kh·∫©u m·ªõi</Label>
                  <Input 
                    id="new-password"
                    type="password" 
                    value={newPassword}
                    onChange={(e) => setNewPassword(e.target.value)}
                  />
                  <p className="text-xs text-slate-500">T·ªëi thi·ªÉu 8 k√Ω t·ª±</p>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="confirm-password">X√°c nh·∫≠n m·∫≠t kh·∫©u m·ªõi</Label>
                  <Input 
                    id="confirm-password"
                    type="password" 
                    value={confirmPassword}
                    onChange={(e) => setConfirmPassword(e.target.value)}
                  />
                </div>

                <Button 
                  className="w-full bg-gradient-to-r from-red-600 to-orange-600 hover:from-red-700 hover:to-orange-700 gap-2"
                  onClick={handleChangePassword}
                >
                  <Key className="w-4 h-4" />
                  ƒê·ªïi m·∫≠t kh·∫©u
                </Button>
              </CardContent>
            </Card>

            <Card className="border-slate-200/60 shadow-sm">
              <CardHeader className="border-b border-slate-100">
                <CardTitle className="flex items-center gap-2">
                  <Shield className="w-5 h-5 text-green-600" />
                  B·∫£o m·∫≠t n√¢ng cao
                </CardTitle>
                <CardDescription>TƒÉng c∆∞·ªùng b·∫£o m·∫≠t cho t√†i kho·∫£n</CardDescription>
              </CardHeader>
              <CardContent className="space-y-5 pt-5">
                <div className="flex items-center justify-between">
                  <div className="flex-1 pr-4">
                    <Label className="font-medium">X√°c th·ª±c hai y·∫øu t·ªë (2FA)</Label>
                    <p className="text-xs text-slate-500 mt-1">TƒÉng c∆∞·ªùng b·∫£o m·∫≠t v·ªõi m√£ OTP</p>
                  </div>
                  <Switch 
                    checked={twoFactorAuth} 
                    onCheckedChange={(checked) => {
                      setTwoFactorAuth(checked);
                      toast.success(checked ? 'ƒê√£ b·∫≠t x√°c th·ª±c 2 y·∫øu t·ªë' : 'ƒê√£ t·∫Øt x√°c th·ª±c 2 y·∫øu t·ªë');
                    }}
                  />
                </div>

                <Separator />

                <div className="space-y-3">
                  <Label>Phi√™n ƒëƒÉng nh·∫≠p</Label>
                  <div className="p-3 bg-slate-50 rounded-lg border border-slate-200">
                    <div className="flex items-center justify-between mb-2">
                      <p className="text-sm font-medium text-slate-900">Chrome - Windows</p>
                      <Badge className="bg-green-50 text-green-700 border-0 text-xs">Hi·ªán t·∫°i</Badge>
                    </div>
                    <p className="text-xs text-slate-600">H·ªì Ch√≠ Minh, Vi·ªát Nam ‚Ä¢ 5 ph√∫t tr∆∞·ªõc</p>
                  </div>
                  <Button 
                    variant="outline" 
                    className="w-full gap-2 hover:bg-red-50 hover:border-red-300 hover:text-red-700" 
                    size="sm"
                    onClick={handleLogoutAllDevices}
                  >
                    <Trash2 className="w-4 h-4" />
                    ƒêƒÉng xu·∫•t t·∫•t c·∫£ thi·∫øt b·ªã kh√°c
                  </Button>
                </div>

                <Separator />

                <div className="p-4 bg-green-50 rounded-lg border border-green-200">
                  <div className="flex items-start gap-3">
                    <CheckCircle className="w-5 h-5 text-green-600 mt-0.5" />
                    <div>
                      <p className="font-medium text-green-900 mb-1">B·∫£o m·∫≠t t·ªët</p>
                      <p className="text-sm text-green-700">T√†i kho·∫£n c·ªßa b·∫°n ƒë∆∞·ª£c b·∫£o v·ªá t·ªët. Ti·∫øp t·ª•c duy tr√¨ c√°c bi·ªán ph√°p b·∫£o m·∫≠t n√†y.</p>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        </TabsContent>
      </Tabs>
    </div>
  );
}
